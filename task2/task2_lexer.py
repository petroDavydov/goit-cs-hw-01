from colorama import Fore, Style, init
init(autoreset=True)


class LexicalError(Exception):
    pass


class ParsingError(Exception):
    pass


class TokenType:
    INTEGER = "INTEGER"
    PLUS = "PLUS"  # –î–æ–¥–∞–≤–∞–Ω–Ω—è
    MINUS = "MINUS"  # –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è
    MUL = "MUL"  # –ú–Ω–æ–∂–µ–Ω–Ω—è
    DIV = "DIV"  # –î—ñ–ª–µ–Ω–Ω—è
    LPAREN = "LPAREN"  # –õ—ñ–≤–∞ –¥—É–∂–∫–∞
    RPAREN = "RPAREN"  # –ü—Ä–∞–≤–∞ –¥—É–∂–∫–∞
    EOF = "EOF"  # –û–∑–Ω–∞—á–∞—î –∫—ñ–Ω–µ—Ü—å –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞


class Token:
    def __init__(self, type, value):
        self.type = type
        self.value = value

    def __str__(self):
        return f"Token({self.type}, {repr(self.value)})"


class Lexer:
    def __init__(self, text):
        self.text = text
        self.pos = 0
        self.current_char = self.text[self.pos]

    def advance(self):
        """–ü–µ—Ä–µ–º—ñ—â—É—î–º–æ '–≤–∫–∞–∑—ñ–≤–Ω–∏–∫' –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–∏–º–≤–æ–ª –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
        self.pos += 1
        if self.pos > len(self.text) - 1:
            self.current_char = None  # –û–∑–Ω–∞—á–∞—î –∫—ñ–Ω–µ—Ü—å –≤–≤–µ–¥–µ–Ω–Ω—è
        else:
            self.current_char = self.text[self.pos]

    def skip_whitespace(self):
        """–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ–±—ñ–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏."""
        while self.current_char is not None and self.current_char.isspace():
            self.advance()

    def integer(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ü—ñ–ª–µ —á–∏—Å–ª–æ, –∑—ñ–±—Ä–∞–Ω–µ –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ —Ü–∏—Ñ—Ä."""
        result = ""
        while self.current_char is not None and self.current_char.isdigit():
            result += self.current_char
            self.advance()
        return int(result)

    def get_next_token(self):
        """–õ–µ–∫—Å–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä, —â–æ —Ä–æ–∑–±–∏–≤–∞—î –≤—Ö—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫ –Ω–∞ —Ç–æ–∫–µ–Ω–∏."""
        while self.current_char is not None:
            if self.current_char.isspace():
                self.skip_whitespace()
                continue

            if self.current_char.isdigit():
                return Token(TokenType.INTEGER, self.integer())

            if self.current_char == "+":
                self.advance()
                return Token(TokenType.PLUS, "+")

            if self.current_char == "-":
                self.advance()
                return Token(TokenType.MINUS, "-")

            if self.current_char == "*":
                self.advance()
                return Token(TokenType.MUL, "*")

            if self.current_char == "/":
                self.advance()
                return Token(TokenType.DIV, "/")

            if self.current_char == "(":
                self.advance()
                return Token(TokenType.LPAREN, "(")

            if self.current_char == ")":
                self.advance()
                return Token(TokenType.RPAREN, ")")

            raise LexicalError("–ü–æ–º–∏–ª–∫–∞ –ª–µ–∫—Å–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É")

        return Token(TokenType.EOF, None)


class AST:
    pass


class BinOp(AST):
    def __init__(self, left, op, right):
        self.left = left
        self.op = op
        self.right = right


class Num(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value


class Parser:
    def __init__(self, lexer):
        self.lexer = lexer
        self.current_token = self.lexer.get_next_token()

    def error(self):
        raise ParsingError("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É")

    def eat(self, token_type):
        """
        –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–æ–∫–µ–Ω –∑ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º —ñ, —è–∫—â–æ –≤–æ–Ω–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è,
        '–ø–æ–≥–ª–∏–Ω–∞—î–º–æ' –π–æ–≥–æ —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
        """
        if self.current_token.type == token_type:
            self.current_token = self.lexer.get_next_token()
        else:
            self.error()

    def factor(self):
        """–ü–∞—Ä—Å–µ—Ä –¥–ª—è 'factor' –ø—Ä–∞–≤–∏–ª –≥—Ä–∞–º–∞—Ç–∏–∫–∏. –£ –Ω–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É - —Ü–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞."""
        token = self.current_token
        if token.type == TokenType.INTEGER:
            self.eat(TokenType.INTEGER)
            return Num(token)
        elif token.type == TokenType.LPAREN:
            self.eat(TokenType.LPAREN)
            result = self.expr()
            self.eat(TokenType.RPAREN)
            return result

    def term(self):
        """–ü–∞—Ä—Å–µ—Ä –¥–ª—è 'term' –≤–∫–ª—é—á–Ω–æ –º–Ω–æ–∂–µ–Ω–Ω—è —Ç–∞ –¥—ñ–ª–µ–Ω–Ω—è"""
        node = self.factor()

        while self.current_token.type in (TokenType.DIV, TokenType.MUL):
            token = self.current_token
            if token.type == TokenType.DIV:
                self.eat(TokenType.DIV)
            elif token.type == TokenType.MUL:
                self.eat(TokenType.MUL)

            node = BinOp(left=node, op=token, right=self.factor())

        return node

    def expr(self):
        """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤."""
        node = self.term()

        while self.current_token.type in (TokenType.PLUS, TokenType.MINUS):
            token = self.current_token
            if token.type == TokenType.PLUS:
                self.eat(TokenType.PLUS)
            elif token.type == TokenType.MINUS:
                self.eat(TokenType.MINUS)

            node = BinOp(left=node, op=token, right=self.term())

        return node


def print_ast(node, level=0):
    indent = "  " * level
    if isinstance(node, Num):
        print(f"{indent}Num({node.value})")
    elif isinstance(node, BinOp):
        print(f"{indent}BinOp:")
        print(f"{indent}  left: ")
        print_ast(node.left, level + 2)
        print(f"{indent}  op: {node.op.type}")
        print(f"{indent}  right: ")
        print_ast(node.right, level + 2)
    else:
        print(f"{indent}Unknown node type: {type(node)}")


class Interpreter:
    def __init__(self, parser):
        self.parser = parser

    # —è–∫—â–æ –±—É–¥–µ // —Ç–æ –±—É–¥–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
    def visit_BinOp(self, node):
        if node.op.type == TokenType.PLUS:
            return self.visit(node.left) + self.visit(node.right)
        if node.op.type == TokenType.MINUS:
            return self.visit(node.left) - self.visit(node.right)
        if node.op.type == TokenType.MUL:
            return self.visit(node.left) * self.visit(node.right)
        if node.op.type == TokenType.DIV:
            return self.visit(node.left) / self.visit(node.right)

    def visit_Num(self, node):
        return node.value

    def interpret(self):
        tree = self.parser.expr()
        return self.visit(tree)

    def visit(self, node):
        method_name = "visit_" + type(node).__name__
        visitor = getattr(self, method_name, self.generic_visit)
        return visitor(node)

    def generic_visit(self, node):
        raise Exception(f"–ù–µ–º–∞—î –º–µ—Ç–æ–¥—É visit_{type(node).__name__}")


# –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
def run_test_case(expression, expected_result):
    try:
        lexer = Lexer(expression)
        parser = Parser(lexer)
        interpreter = Interpreter(parser)
        result = interpreter.interpret()
        if expected_result is None:
            print(
                f"{Fore.RED}[FAIL] {expression} ‚Üí –æ—Ç—Ä–∏–º–∞–Ω–æ {result}, –∞–ª–µ –æ—á—ñ–∫—É–≤–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞{Style.RESET_ALL}")
        elif result == expected_result:
            print(f"{Fore.GREEN}[OK] {expression} = {result}{Style.RESET_ALL}")
        else:
            print(
                f"{Fore.RED}[FAIL] {expression} ‚Üí {result}, –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å: {expected_result}{Style.RESET_ALL}")
    except Exception as e:
        if expected_result is None:
            print(
                f"{Fore.GREEN}[OK] {expression} ‚Üí –æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}{Style.RESET_ALL}")
        else:
            print(
                f"{Fore.RED}[FAIL] {expression} ‚Üí –ø–æ–º–∏–ª–∫–∞: {e}, –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å: {expected_result}{Style.RESET_ALL}")


def run_all_tests():
    test_cases = [
        ("2 + 3", 5),
        ("10 - 4", 6),
        ("2 + 3 * 4", 14),
        ("(2 + 3) * 4", 20),
        ("10 / 2", 5.0),
        ("8 / (2 + 2)", 2.0),
        ("7 + 3 * (10 / (12 / (3 + 1) - 1))", 22.0),
        ("(1 + 2) * (3 + 4)", 21),
        ("(10 - (2 + 3)) * 2", 10),
        ("2 + * 3", None),  # –°–∏–Ω—Ç–∞–∫—Å–∏—Å —è–∫ –≤–∞—Ä—ñ–∞–Ω—Ç
        ("(4 + 5", None),  # –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥—É–∂–∫–∏
        ("2 + 2", 5),  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ("2 + 3", None)  # –ø–æ–º–∏–ª–∫–∞ –æ—á—ñ–∫—É—î—Ç—å—Å—è, –∞–ª–µ —ó—ó –Ω–µ –±—É–¥–µ

    ]

    for expr, expected in test_cases:
        run_test_case(expr, expected)


# –¥–æ–¥–∞–Ω–æ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑–æ–≤—É —Ç–µ—Å—Ç—É
def main():
    while True:
        try:
            text = input(
                f'{Fore.CYAN}–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ä–∞–∑ (–∞–±–æ{Fore.LIGHTRED_EX} "exit" –¥–ª—è –≤–∏—Ö–æ–¥—É, {Fore.LIGHTYELLOW_EX}"test" –¥–ª—è —Ç–µ—Å—Ç—ñ–≤): {Style.RESET_ALL}')
            if text.lower() == "exit":
                print(
                    f"{Fore.BLUE}üôè –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è! –î–æ–ø–æ–±–∞—á–µ–Ω–Ω—è. üë£ —ñ–∑ –ø—Ä–æ–≥—Ä–∞–º–∏.{Style.RESET_ALL}")
                break
            elif text.lower() == "test":
                run_all_tests()
                continue
            lexer = Lexer(text)
            parser = Parser(lexer)
            interpreter = Interpreter(parser)
            result = interpreter.interpret()
            print(f"{Fore.LIGHTGREEN_EX}{result}{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}{e}{Style.RESET_ALL}")


if __name__ == "__main__":
    main()
